/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace OSGeo.GDAL {

using System;
using System.Runtime.InteropServices;

public class Group : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;
  protected object swigParentRef;

  protected static object ThisOwn_true() { return null; }
  protected object ThisOwn_false() { return this; }

  public Group(IntPtr cPtr, bool cMemoryOwn, object parent) {
    swigCMemOwn = cMemoryOwn;
    swigParentRef = parent;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(Group obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  public static HandleRef getCPtrAndDisown(Group obj, object parent) {
    if (obj != null)
    {
      obj.swigCMemOwn = false;
      obj.swigParentRef = parent;
      return obj.swigCPtr;
    }
    else
    {
      return new HandleRef(null, IntPtr.Zero);
    }
  }
  public static HandleRef getCPtrAndSetReference(Group obj, object parent) {
    if (obj != null)
    {
      obj.swigParentRef = parent;
      return obj.swigCPtr;
    }
    else
    {
      return new HandleRef(null, IntPtr.Zero);
    }
  }

  ~Group() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        GdalPINVOKE.delete_Group(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public string GetName() {
    string ret = GdalPINVOKE.Group_GetName(swigCPtr);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetFullName() {
    string ret = GdalPINVOKE.Group_GetFullName(swigCPtr);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string[] GetMDArrayNames(string[] options) {
        /* %typemap(csout) char** CSL */
        IntPtr cPtr = GdalPINVOKE.Group_GetMDArrayNames(swigCPtr, (options != null)? new GdalPINVOKE.StringListMarshal(options)._ar : null);
        IntPtr objPtr;
        int count = 0;
        if (cPtr != IntPtr.Zero) {
            while (Marshal.ReadIntPtr(cPtr, count*IntPtr.Size) != IntPtr.Zero)
                ++count;
        }
        string[] ret = new string[count];
        if (count > 0) {
	        for(int cx = 0; cx < count; cx++) {
                objPtr = System.Runtime.InteropServices.Marshal.ReadIntPtr(cPtr, cx * System.Runtime.InteropServices.Marshal.SizeOf(typeof(IntPtr)));
                ret[cx]= (objPtr == IntPtr.Zero) ? null : System.Runtime.InteropServices.Marshal.PtrToStringAnsi(objPtr);
            }
        }
        if (cPtr != IntPtr.Zero)
            GdalPINVOKE.StringListDestroy(cPtr);
        
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
        return ret;
}

  public MDArray OpenMDArray(string name, string[] options) {
    IntPtr cPtr = GdalPINVOKE.Group_OpenMDArray(swigCPtr, name, (options != null)? new GdalPINVOKE.StringListMarshal(options)._ar : null);
    MDArray ret = (cPtr == IntPtr.Zero) ? null : new MDArray(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MDArray OpenMDArrayFromFullname(string name, string[] options) {
    IntPtr cPtr = GdalPINVOKE.Group_OpenMDArrayFromFullname(swigCPtr, name, (options != null)? new GdalPINVOKE.StringListMarshal(options)._ar : null);
    MDArray ret = (cPtr == IntPtr.Zero) ? null : new MDArray(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MDArray ResolveMDArray(string name, string starting_point, string[] options) {
    IntPtr cPtr = GdalPINVOKE.Group_ResolveMDArray(swigCPtr, name, starting_point, (options != null)? new GdalPINVOKE.StringListMarshal(options)._ar : null);
    MDArray ret = (cPtr == IntPtr.Zero) ? null : new MDArray(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string[] GetGroupNames(string[] options) {
        /* %typemap(csout) char** CSL */
        IntPtr cPtr = GdalPINVOKE.Group_GetGroupNames(swigCPtr, (options != null)? new GdalPINVOKE.StringListMarshal(options)._ar : null);
        IntPtr objPtr;
        int count = 0;
        if (cPtr != IntPtr.Zero) {
            while (Marshal.ReadIntPtr(cPtr, count*IntPtr.Size) != IntPtr.Zero)
                ++count;
        }
        string[] ret = new string[count];
        if (count > 0) {
	        for(int cx = 0; cx < count; cx++) {
                objPtr = System.Runtime.InteropServices.Marshal.ReadIntPtr(cPtr, cx * System.Runtime.InteropServices.Marshal.SizeOf(typeof(IntPtr)));
                ret[cx]= (objPtr == IntPtr.Zero) ? null : System.Runtime.InteropServices.Marshal.PtrToStringAnsi(objPtr);
            }
        }
        if (cPtr != IntPtr.Zero)
            GdalPINVOKE.StringListDestroy(cPtr);
        
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
        return ret;
}

  public Group OpenGroup(string name, string[] options) {
    IntPtr cPtr = GdalPINVOKE.Group_OpenGroup(swigCPtr, name, (options != null)? new GdalPINVOKE.StringListMarshal(options)._ar : null);
    Group ret = (cPtr == IntPtr.Zero) ? null : new Group(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Group OpenGroupFromFullname(string name, string[] options) {
    IntPtr cPtr = GdalPINVOKE.Group_OpenGroupFromFullname(swigCPtr, name, (options != null)? new GdalPINVOKE.StringListMarshal(options)._ar : null);
    Group ret = (cPtr == IntPtr.Zero) ? null : new Group(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Attribute GetAttribute(string name) {
    IntPtr cPtr = GdalPINVOKE.Group_GetAttribute(swigCPtr, name);
    Attribute ret = (cPtr == IntPtr.Zero) ? null : new Attribute(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string[] GetStructuralInfo() {
        /* %typemap(csout) char**options */
        IntPtr cPtr = GdalPINVOKE.Group_GetStructuralInfo(swigCPtr);
        IntPtr objPtr;
        int count = 0;
        if (cPtr != IntPtr.Zero) {
            while (Marshal.ReadIntPtr(cPtr, count*IntPtr.Size) != IntPtr.Zero)
                ++count;
        }
        string[] ret = new string[count];
        if (count > 0) {
	        for(int cx = 0; cx < count; cx++) {
                objPtr = System.Runtime.InteropServices.Marshal.ReadIntPtr(cPtr, cx * System.Runtime.InteropServices.Marshal.SizeOf(typeof(IntPtr)));
                ret[cx]= (objPtr == IntPtr.Zero) ? null : System.Runtime.InteropServices.Marshal.PtrToStringAnsi(objPtr);
            }
        }
        
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
        return ret;
}

  public Group CreateGroup(string name, string[] options) {
    IntPtr cPtr = GdalPINVOKE.Group_CreateGroup(swigCPtr, name, (options != null)? new GdalPINVOKE.StringListMarshal(options)._ar : null);
    Group ret = (cPtr == IntPtr.Zero) ? null : new Group(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Dimension CreateDimension(string name, string type, string direction, ulong size, string[] options) {
    IntPtr cPtr = GdalPINVOKE.Group_CreateDimension(swigCPtr, name, type, direction, size, (options != null)? new GdalPINVOKE.StringListMarshal(options)._ar : null);
    Dimension ret = (cPtr == IntPtr.Zero) ? null : new Dimension(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Attribute CreateAttribute(string name, int nDimensions, SWIGTYPE_p_GUIntBig dimensions, ExtendedDataType data_type, string[] options) {
    IntPtr cPtr = GdalPINVOKE.Group_CreateAttribute(swigCPtr, name, nDimensions, SWIGTYPE_p_GUIntBig.getCPtr(dimensions), ExtendedDataType.getCPtr(data_type), (options != null)? new GdalPINVOKE.StringListMarshal(options)._ar : null);
    Attribute ret = (cPtr == IntPtr.Zero) ? null : new Attribute(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
