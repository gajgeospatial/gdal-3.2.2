/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace OSGeo.OSR {

using System;
using System.Runtime.InteropServices;

public class CRSInfo : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;
  protected object swigParentRef;

  protected static object ThisOwn_true() { return null; }
  protected object ThisOwn_false() { return this; }

  public CRSInfo(IntPtr cPtr, bool cMemoryOwn, object parent) {
    swigCMemOwn = cMemoryOwn;
    swigParentRef = parent;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(CRSInfo obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  public static HandleRef getCPtrAndDisown(CRSInfo obj, object parent) {
    if (obj != null)
    {
      obj.swigCMemOwn = false;
      obj.swigParentRef = parent;
      return obj.swigCPtr;
    }
    else
    {
      return new HandleRef(null, IntPtr.Zero);
    }
  }
  public static HandleRef getCPtrAndSetReference(CRSInfo obj, object parent) {
    if (obj != null)
    {
      obj.swigParentRef = parent;
      return obj.swigCPtr;
    }
    else
    {
      return new HandleRef(null, IntPtr.Zero);
    }
  }

  ~CRSInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        OsrPINVOKE.delete_CRSInfo(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public string auth_name {
    get {
      string ret = OsrPINVOKE.CRSInfo_auth_name_get(swigCPtr);
      if (OsrPINVOKE.SWIGPendingException.Pending) throw OsrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string code {
    get {
      string ret = OsrPINVOKE.CRSInfo_code_get(swigCPtr);
      if (OsrPINVOKE.SWIGPendingException.Pending) throw OsrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string name {
    get {
      string ret = OsrPINVOKE.CRSInfo_name_get(swigCPtr);
      if (OsrPINVOKE.SWIGPendingException.Pending) throw OsrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public CRSType type {
    get {
      CRSType ret = (CRSType)OsrPINVOKE.CRSInfo_type_get(swigCPtr);
      if (OsrPINVOKE.SWIGPendingException.Pending) throw OsrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool deprecated {
    get {
      bool ret = OsrPINVOKE.CRSInfo_deprecated_get(swigCPtr);
      if (OsrPINVOKE.SWIGPendingException.Pending) throw OsrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool bbox_valid {
    get {
      bool ret = OsrPINVOKE.CRSInfo_bbox_valid_get(swigCPtr);
      if (OsrPINVOKE.SWIGPendingException.Pending) throw OsrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double west_lon_degree {
    get {
      double ret = OsrPINVOKE.CRSInfo_west_lon_degree_get(swigCPtr);
      if (OsrPINVOKE.SWIGPendingException.Pending) throw OsrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double south_lat_degree {
    get {
      double ret = OsrPINVOKE.CRSInfo_south_lat_degree_get(swigCPtr);
      if (OsrPINVOKE.SWIGPendingException.Pending) throw OsrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double east_lon_degree {
    get {
      double ret = OsrPINVOKE.CRSInfo_east_lon_degree_get(swigCPtr);
      if (OsrPINVOKE.SWIGPendingException.Pending) throw OsrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double north_lat_degree {
    get {
      double ret = OsrPINVOKE.CRSInfo_north_lat_degree_get(swigCPtr);
      if (OsrPINVOKE.SWIGPendingException.Pending) throw OsrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string area_name {
    get {
      string ret = OsrPINVOKE.CRSInfo_area_name_get(swigCPtr);
      if (OsrPINVOKE.SWIGPendingException.Pending) throw OsrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string projection_method {
    get {
      string ret = OsrPINVOKE.CRSInfo_projection_method_get(swigCPtr);
      if (OsrPINVOKE.SWIGPendingException.Pending) throw OsrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public CRSInfo(string auth_name, string code, string name, CRSType type, bool deprecated, bool bbox_valid, double west_lon_degree, double south_lat_degree, double east_lon_degree, double north_lat_degree, string area_name, string projection_method) : this(OsrPINVOKE.new_CRSInfo(auth_name, code, name, (int)type, deprecated, bbox_valid, west_lon_degree, south_lat_degree, east_lon_degree, north_lat_degree, area_name, projection_method), true, null) {
    if (OsrPINVOKE.SWIGPendingException.Pending) throw OsrPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
